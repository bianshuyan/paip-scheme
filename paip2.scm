(define (mappend proc lst)
  (apply append (map proc lst)))
(define (random-elt lst)
  (list-ref lst (random (length lst))))
(define *simple-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Noun))
    (verb-phrase -> (Verb noun-phrase))
    (Article -> the a)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked)))
(define *bigger-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Adj* Noun PP*) (Name) (Pronoun))
    (verb-phrase -> (Verb noun-phrase PP*))
    (PP* -> () (PP PP*))
    (Adj* -> () (Adj Adj*))
    (PP -> (Prep noun-phrase))
    (Prep -> to in by with on)
    (Adj -> big little blue green adiabatic)
    (Article -> the a)
    (Name -> Pat Kim Lee Terry Robin)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked)
    (Pronoun -> he she it these those that)))
(define *grammar* *simple-grammar*)
(define rule-lhs car)
(define rule-rhs cddr)
(define (rewrites category)
  (cond ((assq category *grammar*) => rule-rhs)
        (else #f)))
(define (generate1 phrase)
  (cond ((or (pair? phrase) (null? phrase))
         (mappend generate1 phrase))
        ((rewrites phrase) =>
         (lambda (choices) (generate1 (random-elt choices))))
        (else (list phrase))))
(define (generate2 phrase)
  (if (or (pair? phrase) (null? phrase))
      (mappend generate2 phrase)
      (let ((choices (rewrites phrase)))
        (if (eq? choices #f)
            (list phrase)
            (generate2 (random-elt choices))))))
(define (generate-tree phrase)
  (cond ((or (pair? phrase) (null? phrase))
         (map generate-tree phrase))
        ((rewrites phrase) =>
         (lambda (choices) (cons phrase (generate-tree (random-elt choices)))))
        (else (list phrase))))
(define (combine-all xlst ylst)
  (cross-product append xlst ylst))
(define (generate-all phrase)
  (cond ((null? phrase) (list '()))
        ((pair? phrase)
         (combine-all (generate-all (car phrase))
                      (generate-all (cdr phrase))))
        ((rewrites phrase) =>
         (lambda (choices) (mappend generate-all choices)))
        (else (list (list phrase)))))
(define (cross-product proc xlst ylst)
  (mappend (lambda (y)
             (map (lambda (x) (proc x y)) xlst))
           ylst))
