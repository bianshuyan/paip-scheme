(define-record-type op
  (fields action preconds add-lst del-lst))
(define *school-ops*
  (list
   (make-op 'drive-son-to-school
            '(son-at-home car-works)
            '(son-at-school)
            '(son-at-home))
   (make-op 'shop-installs-battery
            '(car-needs-battery shop-knows-problem shop-has-money)
            '(car-works)
            '())
   (make-op 'tell-shop-problem
            '(in-communication-with-shop)
            '(shop-knows-problem)
            '())
   (make-op 'telephone-shop
            '(know-phone-number)
            '(in-communication-with-shop)
            '())
   (make-op 'look-up-number
            '(have-phone-book)
            '(know-phone-number)
            '())
   (make-op 'give-shop-money
            '(have-money)
            '(shop-has-money)
            '(have-money))))
(define (member? x l)
  (cond ((null? l) #f)
        ((eq? x (car l)) #t)
        (else (member? x (cdr l)))))
(define (union s1 s2)
  (cond ((null? s1) s2)
        ((member? (car s1) s2)
         (union (cdr s1) s2))
        (else (cons (car s1)
                    (union (cdr s1) s2)))))
(define (some? pred lst)
  (cond ((null? lst) #f)
        ((pred (car lst)) #t)
        (else (some? pred (cdr lst)))))
(define (subset? s1 s2)
  (cond ((null? s1) #t)
        ((member? (car s1) s2) (subset? (cdr s1) s2))
        (else #f)))
(define (every? pred lst)
  (cond ((null? lst) #t)
        ((pred (car lst)) (every? pred (cdr lst)))
        (else #f)))
(define (diff s1 s2)
  (cond ((null? s1) '())
        ((member? (car s1) s2)
         (diff (cdr s1) s2))
        (else (cons (car s1)
                    (diff (cdr s1) s2)))))
(define (appropriate? goal op)
  (member? goal (op-add-lst op)))
(define (gps *state* goals *ops*)
  (define (achieve goal)
    (or (member? goal *state*)
        (some? apply-op
               (filter (lambda (op)
                         (appropriate? goal op)) *ops*))))
  (define (apply-op op)
    (if (every? achieve (op-preconds op))
        (begin
          (display (list 'executing (op-action op)))
          (newline)
          (set! *state* (diff *state* (op-del-lst op)))
          (set! *state* (union *state* (op-add-lst op)))
          #t)
        #f))
  (if (every? achieve goals) 'solved 'failed))
;the tests from the book
;(gps '(son-at-home car-needs-battery have-money have-phone-book)
;     '(son-at-school)
;     *school-ops*)
;(gps '(son-at-home car-needs-battery have-money)
;     '(son-at-school)
;     *school-ops*)
;(gps '(son-at-home car-works)
;     '(son-at-school)
;     *school-ops*)
